package main

import (
	"fmt"
	"sync"
)

// примечание: данная реализация актуальна лишь для Go версии выше 1.22 ввиду того факта,
// что поведение при замыкании было изменено в версии 1.22 и каждая итерация цикла теперь
// создает свою копию переменной, которую замыкание потом получит,
// а раньше (д оверсии 1.22) в замыкание передавалось последнее значение value (10)

// функция для конкурентноого возведения и вывода квадратов чисел из массива [2,4,6,8,10]
// порядок не гарантирован из-за конкурентности вычислений
func concurrentSquare() {
	var wg sync.WaitGroup // создаем вейт-группу для синронизации
	array := [5]int{2, 4, 6, 8, 10}
	for _, value := range array {
		wg.Add(1)   // увеличиваем счетчик на единицу при добавлении горутины
		go func() { // запускаем горутину для конкурентное вычисление квадрата
			defer wg.Done() // откладываем завершение вычислений
			fmt.Println(value * value)
		}()
	}
	wg.Wait() // ожидаем результат
}

// порядок гарантирован из-за использования слайса и обращения по индексу
func concurrentSquareWithSlice() {
	var wg sync.WaitGroup // создаем вейт-группу для синронизации
	sliceOfSquares := make([]int, 5)
	array := [5]int{2, 4, 6, 8, 10}
	for i, value := range array {
		wg.Add(1)   // увеличиваем счетчик на единицу при добавлении горутины
		go func() { // запускаем горутину для конкурентное вычисление квадрата
			defer wg.Done() // откладываем завершение вычислений
			sliceOfSquares[i] = value * value
		}()
	}
	wg.Wait() // ожидаем результат
	fmt.Println(sliceOfSquares)
}

func main() {
	fmt.Println("Конкурентное вычисление квадратов чисел:")
	concurrentSquare()
	fmt.Println("Конкурентное вычисление с сохранением порядка, используя слайс:")
	concurrentSquareWithSlice()
}
