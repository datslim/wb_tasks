package main

import "fmt"

// —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤,
// –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –≤—Ö–æ–¥–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
func setOfUniqueWords(inputSet []string) []string {
	seenWord := make(map[string]bool)               // —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≥–æ, –≤–∏–¥–µ–ª–∏ –ª–∏ –º—ã —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–µ—Ç
	uniqueWords := make([]string, 0, len(inputSet)) // —Å–æ–∑–¥–∞–µ–º —Å–ª–∞–π—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤

	for _, word := range inputSet {
		if _, ok := seenWord[word]; !ok { // –µ—Å–ª–∏ –º—ã –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª–∏ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ
			seenWord[word] = true                   // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ true (—Å–ª–æ–≤–æ —É–∂–µ –≤–∏–¥–µ–ª–∏)
			uniqueWords = append(uniqueWords, word) // –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–∞–π—Å —ç—Ç–æ —Å–ª–æ–≤–æ, –≤–µ–¥—å –æ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ
		}
	}

	return uniqueWords
}

func main() {
	englishSet := []string{"cat", "cat", "dog", "cat", "tree"}
	russianSet := []string{"–∫–æ—à–∫–∞", "–∫–æ—à–∫–∞", "—Å–æ–±–∞–∫–∞", "–∫–æ—à–∫–∞", "–¥–µ—Ä–µ–≤–æ"}
	emojiSet := []string{"üò∫", "üò∫", "üê∂", "üò∫", "üå≥"}
	fmt.Printf("–î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞: %v, —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –±—É–¥—É—Ç —Å–ª–æ–≤–∞: %v\n", englishSet, setOfUniqueWords(englishSet))
	fmt.Printf("–î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞: %v, —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –±—É–¥—É—Ç —Å–ª–æ–≤–∞: %v\n", russianSet, setOfUniqueWords(russianSet))
	fmt.Printf("–î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞: %v, —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –±—É–¥—É—Ç —Å–ª–æ–≤–∞: %v\n", emojiSet, setOfUniqueWords(emojiSet))
}
